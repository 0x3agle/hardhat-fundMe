{
    "language": "Solidity",
    "sources": {
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
        },
        "contracts/FundMe.sol": {
            "content": "/*\n1. People will send you cryptocurency in terms of USD\n    a. Make a payable function to recieve ether\n    b. A function to get the USD value of ether\n        i. Importing AggregatorV3Interface from github\n    c. A function to convert ether to its USD equivalent\n2. Only you can Withdraw it\n*/\n\n//SPDX-License-Identifier:MIT\npragma solidity ^0.8.8;\nimport \"./PriceConverter.sol\";\n\nerror notOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public constant MIN_USD = 50 * 1e18;\n    address public immutable i_owner;\n    uint256 amount_rcvd;\n    address[] public funders;\n    mapping(address => uint256) public funded;\n\n    AggregatorV3Interface public priceFeed;\n\n    //Assign the owner as the address deploying the contract\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    //Called when a funder sends fund to smart contract\n    function fund() public payable {\n        //Condition to receive a minimum amount\n        amount_rcvd = msg.value.getConversionRate(priceFeed);\n        require(amount_rcvd >= MIN_USD, \"Minimum amount you can send is $50\");\n        //storing address of funder in an array\n        funders.push(msg.sender);\n        //Mapping the total amount to funder using funded mapper\n        funded[msg.sender] += amount_rcvd;\n    }\n\n    function withdraw() public onlyOwner {\n        //Clearing all the fund mappings for each funder\n        for (uint i = 0; i < funders.length; i++) {\n            address funder = funders[i];\n            funded[funder] = 0;\n        }\n\n        //Resetting the array\n        funders = new address[](0);\n\n        //Withdrawing funds from smart conract.There are three ways:\n        //1. Transfer\n        //payable(msg.sender).transfer(address(this).balance);\n        //2. Send\n        //bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        //require(sendSuccess,\"Send Failed\");\n        //3.Call\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call Failed\");\n    }\n\n    modifier onlyOwner() {\n        //Checking if the withdraw function is called by the owner\n        //require(msg.sender == i_owner,\"You are not the owner\");\n        if (msg.sender != i_owner) {\n            revert notOwner();\n        }\n        //Running the rest of the code\n        _;\n    }\n\n    // If someone directly send you fund, they will be redirected to fund() using below functions.\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
        },
        "contracts/PriceConverter.sol": {
            "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    //Getting the price of ethereum\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        //Getting the latest price of ETH in USD\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n\n        //price = 1000_00000000\n        return uint256(price * 1e10);\n        //price is in terms of USD multiplied by 10^10\n        //price = 1000_000000000000000000\n        //As solidity is not compatible with decimal, we make the decimals(received amount) = decimals(ETH in USD)\n    }\n\n    //Converting the ethereum into USD\n    function getConversionRate(\n        uint256 _ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        //ethPrice=1000000000000000000000; ethAmount(in wei)=50000000000000000\n        uint256 ethAmountInUsd = (ethPrice * _ethAmount) / 1e18;\n        //ethAmountInUsd = 50000000000000000000 ($50)\n        return ethAmountInUsd;\n    }\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": {
            "useLiteralContent": true
        }
    }
}
