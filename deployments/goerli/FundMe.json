{
    "address": "0x9A085B4E0D57B052ccd43e48DE300bf30a072717",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__notOwner",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MIN_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunders",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0x32d8680a391823c94976d0e4194e9b8ccbd4dc63c526e61bbc3d2bcf109211d5",
    "receipt": {
        "to": null,
        "from": "0xBBd1FFb47126bfeDeFf62d974E256ea797Ad9a67",
        "contractAddress": "0x9A085B4E0D57B052ccd43e48DE300bf30a072717",
        "transactionIndex": 52,
        "gasUsed": "1053870",
        "logsBloom": "0x
        "blockHash": "0xa9fc0147ec2e009c5e2b7b79dafdb1b5bd5415e45cef6abfd55ccacd419814e9",
        "transactionHash": "0x32d8680a391823c94976d0e4194e9b8ccbd4dc63c526e61bbc3d2bcf109211d5",
        "logs": [],
        "blockNumber": 8448913,
        "cumulativeGasUsed": "9892941",
        "status": 1,
        "byzantium": true
    },
    "args": ["0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"],
    "numDeployments": 2,
    "solcInputHash": "f4aeefb5daa3680a5f346aefdfdc4dd5",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MIN_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Priyam Soni\",\"details\":\"This contract implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"FundMe Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Assign the owner as the address deploying the contract\"},\"fund()\":{\"notice\":\"Called when a funder sends fund to smart contract\"},\"getOwner()\":{\"notice\":\"Getter Functions\"}},\"notice\":\"This contract is to demo a sample crowd funding\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"/*\\n    1. People will send you cryptocurency in terms of USD\\n    a. Make a payable function to recieve ether\\n    b. A function to get the USD value of ether\\n        i. Importing AggregatorV3Interface from github\\n    c. A function to convert ether to its USD equivalent\\n    2. Only you can Withdraw it\\n*/\\n\\n//SPDX-License-Identifier:MIT\\npragma solidity ^0.8.8;\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__notOwner();\\n\\n/**\\n * @title FundMe Contract\\n * @author Priyam Soni\\n * @notice This contract is to demo a sample crowd funding\\n * @dev This contract implements price feeds as our library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_funded;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    address private immutable i_owner;\\n    uint256 public constant MIN_USD = 50 * 10 ** 18;\\n\\n    modifier onlyOwner() {\\n        /**\\n         * @notice Checking if the withdraw function is called by the owner\\n         * @custom:oldsyntax require(msg.sender == i_owner,\\\"You are not the owner\\\");\\n         */\\n        if (msg.sender != i_owner) {\\n            revert FundMe__notOwner();\\n        }\\n        //Running the rest of the code\\n        _;\\n    }\\n\\n    /**\\n     * @notice Assign the owner as the address deploying the contract\\n     */\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    /**\\n     * @notice Called when a funder sends fund to smart contract\\n     */\\n\\n    function fund() public payable {\\n        //Condition to receive a minimum amount\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MIN_USD,\\n            \\\"Minimum amount you can send is $50\\\"\\n        );\\n        //storing address of funder in an array\\n        s_funders.push(msg.sender);\\n        //Mapping the total amount to funder using funded mapper\\n        s_funded[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        //Clearing all the fund mappings for each funder\\n        for (uint i = 0; i < s_funders.length; i++) {\\n            address funder = s_funders[i];\\n            s_funded[funder] = 0;\\n        }\\n\\n        //Resetting the array\\n        s_funders = new address[](0);\\n\\n        /*\\n            Withdrawing funds from smart conract.There are three ways:\\n            1. Transfer\\n            payable(msg.sender).transfer(address(this).balance);\\n            2. Send\\n            bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n            require(sendSuccess,\\\"Send Failed\\\");\\n            3.Call\\n        */\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory _funders = s_funders;\\n        for (uint i = 0; i < _funders.length; i++) {\\n            address funder = _funders[i];\\n            s_funded[funder] = 0;\\n        }\\n        //Resetting the array\\n        s_funders = new address[](0);\\n\\n        /*\\n            Withdrawing funds from smart conract.There are three ways:\\n            1. Transfer\\n            payable(msg.sender).transfer(address(this).balance);\\n            2. Send\\n            bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n            require(sendSuccess,\\\"Send Failed\\\");\\n            3.Call\\n        */\\n\\n        (bool callSuccess, ) = payable(i_owner).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed\\\");\\n    }\\n\\n    /**\\n     * @notice Getter Functions\\n     */\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getFunded(address funder) public view returns (uint) {\\n        return s_funded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xbdcc3c438bbf7cafecab39641eacd7a51cbd6556e011c49e91924d21f503ef31\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    // call it get fiatConversionRate, since it assumes something about decimals\\n    // It wouldn't work for every aggregator\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xeeacca248fbda7cef395e4ab393f5240714990fe60f56ab0a91e55b729cf1a65\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b506040516200133b3803806200133b833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111b56200018660003960008181610252015281816104940152818161061f015261081501526111b56000f3fe60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461013c5780639e87a5cd14610167578063b60d428814610192578063be2693f01461019c5761007b565b806316e459c514610080578063213dbea2146100bd5780633a7b6c74146100e85780633ccfd60b14610125575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610ac7565b6101b3565b6040516100b49190610b0d565b60405180910390f35b3480156100c957600080fd5b506100d26101fc565b6040516100df9190610b0d565b60405180910390f35b3480156100f457600080fd5b5061010f600480360381019061010a9190610b54565b610209565b60405161011c9190610b90565b60405180910390f35b34801561013157600080fd5b5061013a610250565b005b34801561014857600080fd5b50610151610490565b60405161015e9190610b90565b60405180910390f35b34801561017357600080fd5b5061017c6104b8565b6040516101899190610c0a565b60405180910390f35b61019a6104e2565b005b3480156101a857600080fd5b506101b161061d565b005b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b600080828154811061021e5761021d610c25565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102d5576040517f8186952400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103805760008082815481106102fa576102f9610c25565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061037890610c83565b9150506102d8565b50600067ffffffffffffffff81111561039c5761039b610ccc565b5b6040519080825280602002602001820160405280156103ca5781602001602082028036833780820191505090505b50600090805190602001906103e09291906109bd565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161040790610d2c565b60006040518083038185875af1925050503d8060008114610444576040519150601f19603f3d011682016040523d82523d6000602084013e610449565b606091505b505090508061048d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048490610d9e565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610521600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108e190919063ffffffff16565b1015610562576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055990610e30565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106149190610e50565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106a2576040517f8186952400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561072557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106db575b5050505050905060005b81518110156107b057600082828151811061074d5761074c610c25565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107a890610c83565b91505061072f565b50600067ffffffffffffffff8111156107cc576107cb610ccc565b5b6040519080825280602002602001820160405280156107fa5781602001602082028036833780820191505090505b50600090805190602001906108109291906109bd565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161085790610d2c565b60006040518083038185875af1925050503d8060008114610894576040519150601f19603f3d011682016040523d82523d6000602084013e610899565b606091505b50509050806108dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d490610d9e565b60405180910390fd5b5050565b6000806108ed8361091d565b90506000670de0b6b3a764000085836109069190610ea6565b6109109190610f2f565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561096657600080fd5b505afa15801561097a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099e9190610fed565b5050509150506402540be400816109b59190611068565b915050919050565b828054828255906000526020600020908101928215610a36579160200282015b82811115610a355782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109dd565b5b509050610a439190610a47565b5090565b5b80821115610a60576000816000905550600101610a48565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9482610a69565b9050919050565b610aa481610a89565b8114610aaf57600080fd5b50565b600081359050610ac181610a9b565b92915050565b600060208284031215610add57610adc610a64565b5b6000610aeb84828501610ab2565b91505092915050565b6000819050919050565b610b0781610af4565b82525050565b6000602082019050610b226000830184610afe565b92915050565b610b3181610af4565b8114610b3c57600080fd5b50565b600081359050610b4e81610b28565b92915050565b600060208284031215610b6a57610b69610a64565b5b6000610b7884828501610b3f565b91505092915050565b610b8a81610a89565b82525050565b6000602082019050610ba56000830184610b81565b92915050565b6000819050919050565b6000610bd0610bcb610bc684610a69565b610bab565b610a69565b9050919050565b6000610be282610bb5565b9050919050565b6000610bf482610bd7565b9050919050565b610c0481610be9565b82525050565b6000602082019050610c1f6000830184610bfb565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c8e82610af4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cc157610cc0610c54565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d16600083610cfb565b9150610d2182610d06565b600082019050919050565b6000610d3782610d09565b9150819050919050565b600082825260208201905092915050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610d88600b83610d41565b9150610d9382610d52565b602082019050919050565b60006020820190508181036000830152610db781610d7b565b9050919050565b7f4d696e696d756d20616d6f756e7420796f752063616e2073656e64206973202460008201527f3530000000000000000000000000000000000000000000000000000000000000602082015250565b6000610e1a602283610d41565b9150610e2582610dbe565b604082019050919050565b60006020820190508181036000830152610e4981610e0d565b9050919050565b6000610e5b82610af4565b9150610e6683610af4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e9b57610e9a610c54565b5b828201905092915050565b6000610eb182610af4565b9150610ebc83610af4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ef557610ef4610c54565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f3a82610af4565b9150610f4583610af4565b925082610f5557610f54610f00565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f7f81610f60565b8114610f8a57600080fd5b50565b600081519050610f9c81610f76565b92915050565b6000819050919050565b610fb581610fa2565b8114610fc057600080fd5b50565b600081519050610fd281610fac565b92915050565b600081519050610fe781610b28565b92915050565b600080600080600060a0868803121561100957611008610a64565b5b600061101788828901610f8d565b955050602061102888828901610fc3565b945050604061103988828901610fd8565b935050606061104a88828901610fd8565b925050608061105b88828901610f8d565b9150509295509295909350565b600061107382610fa2565b915061107e83610fa2565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110bd576110bc610c54565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110fa576110f9610c54565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561113757611136610c54565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561117457611173610c54565b5b82820290509291505056fea26469706673582212203fc4feae28e17d764f8d78ddf4d769a6a1abfa3817b7ff791d232390541271ad64736f6c63430008080033",
    "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461013c5780639e87a5cd14610167578063b60d428814610192578063be2693f01461019c5761007b565b806316e459c514610080578063213dbea2146100bd5780633a7b6c74146100e85780633ccfd60b14610125575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610ac7565b6101b3565b6040516100b49190610b0d565b60405180910390f35b3480156100c957600080fd5b506100d26101fc565b6040516100df9190610b0d565b60405180910390f35b3480156100f457600080fd5b5061010f600480360381019061010a9190610b54565b610209565b60405161011c9190610b90565b60405180910390f35b34801561013157600080fd5b5061013a610250565b005b34801561014857600080fd5b50610151610490565b60405161015e9190610b90565b60405180910390f35b34801561017357600080fd5b5061017c6104b8565b6040516101899190610c0a565b60405180910390f35b61019a6104e2565b005b3480156101a857600080fd5b506101b161061d565b005b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b600080828154811061021e5761021d610c25565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102d5576040517f8186952400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103805760008082815481106102fa576102f9610c25565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061037890610c83565b9150506102d8565b50600067ffffffffffffffff81111561039c5761039b610ccc565b5b6040519080825280602002602001820160405280156103ca5781602001602082028036833780820191505090505b50600090805190602001906103e09291906109bd565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161040790610d2c565b60006040518083038185875af1925050503d8060008114610444576040519150601f19603f3d011682016040523d82523d6000602084013e610449565b606091505b505090508061048d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048490610d9e565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610521600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108e190919063ffffffff16565b1015610562576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055990610e30565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106149190610e50565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106a2576040517f8186952400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561072557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106db575b5050505050905060005b81518110156107b057600082828151811061074d5761074c610c25565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107a890610c83565b91505061072f565b50600067ffffffffffffffff8111156107cc576107cb610ccc565b5b6040519080825280602002602001820160405280156107fa5781602001602082028036833780820191505090505b50600090805190602001906108109291906109bd565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161085790610d2c565b60006040518083038185875af1925050503d8060008114610894576040519150601f19603f3d011682016040523d82523d6000602084013e610899565b606091505b50509050806108dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d490610d9e565b60405180910390fd5b5050565b6000806108ed8361091d565b90506000670de0b6b3a764000085836109069190610ea6565b6109109190610f2f565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561096657600080fd5b505afa15801561097a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099e9190610fed565b5050509150506402540be400816109b59190611068565b915050919050565b828054828255906000526020600020908101928215610a36579160200282015b82811115610a355782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109dd565b5b509050610a439190610a47565b5090565b5b80821115610a60576000816000905550600101610a48565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9482610a69565b9050919050565b610aa481610a89565b8114610aaf57600080fd5b50565b600081359050610ac181610a9b565b92915050565b600060208284031215610add57610adc610a64565b5b6000610aeb84828501610ab2565b91505092915050565b6000819050919050565b610b0781610af4565b82525050565b6000602082019050610b226000830184610afe565b92915050565b610b3181610af4565b8114610b3c57600080fd5b50565b600081359050610b4e81610b28565b92915050565b600060208284031215610b6a57610b69610a64565b5b6000610b7884828501610b3f565b91505092915050565b610b8a81610a89565b82525050565b6000602082019050610ba56000830184610b81565b92915050565b6000819050919050565b6000610bd0610bcb610bc684610a69565b610bab565b610a69565b9050919050565b6000610be282610bb5565b9050919050565b6000610bf482610bd7565b9050919050565b610c0481610be9565b82525050565b6000602082019050610c1f6000830184610bfb565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c8e82610af4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cc157610cc0610c54565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d16600083610cfb565b9150610d2182610d06565b600082019050919050565b6000610d3782610d09565b9150819050919050565b600082825260208201905092915050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610d88600b83610d41565b9150610d9382610d52565b602082019050919050565b60006020820190508181036000830152610db781610d7b565b9050919050565b7f4d696e696d756d20616d6f756e7420796f752063616e2073656e64206973202460008201527f3530000000000000000000000000000000000000000000000000000000000000602082015250565b6000610e1a602283610d41565b9150610e2582610dbe565b604082019050919050565b60006020820190508181036000830152610e4981610e0d565b9050919050565b6000610e5b82610af4565b9150610e6683610af4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e9b57610e9a610c54565b5b828201905092915050565b6000610eb182610af4565b9150610ebc83610af4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ef557610ef4610c54565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f3a82610af4565b9150610f4583610af4565b925082610f5557610f54610f00565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f7f81610f60565b8114610f8a57600080fd5b50565b600081519050610f9c81610f76565b92915050565b6000819050919050565b610fb581610fa2565b8114610fc057600080fd5b50565b600081519050610fd281610fac565b92915050565b600081519050610fe781610b28565b92915050565b600080600080600060a0868803121561100957611008610a64565b5b600061101788828901610f8d565b955050602061102888828901610fc3565b945050604061103988828901610fd8565b935050606061104a88828901610fd8565b925050608061105b88828901610f8d565b9150509295509295909350565b600061107382610fa2565b915061107e83610fa2565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110bd576110bc610c54565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110fa576110f9610c54565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561113757611136610c54565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561117457611173610c54565b5b82820290509291505056fea26469706673582212203fc4feae28e17d764f8d78ddf4d769a6a1abfa3817b7ff791d232390541271ad64736f6c63430008080033",
    "devdoc": {
        "author": "Priyam Soni",
        "details": "This contract implements price feeds as our library",
        "kind": "dev",
        "methods": {},
        "title": "FundMe Contract",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "constructor": {
                "notice": "Assign the owner as the address deploying the contract"
            },
            "fund()": {
                "notice": "Called when a funder sends fund to smart contract"
            },
            "getOwner()": {
                "notice": "Getter Functions"
            }
        },
        "notice": "This contract is to demo a sample crowd funding",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 57,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 61,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funded",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 64,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
