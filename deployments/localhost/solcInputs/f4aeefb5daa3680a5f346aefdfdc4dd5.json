{
    "language": "Solidity",
    "sources": {
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
        },
        "contracts/FundMe.sol": {
            "content": "/*\n    1. People will send you cryptocurency in terms of USD\n    a. Make a payable function to recieve ether\n    b. A function to get the USD value of ether\n        i. Importing AggregatorV3Interface from github\n    c. A function to convert ether to its USD equivalent\n    2. Only you can Withdraw it\n*/\n\n//SPDX-License-Identifier:MIT\npragma solidity ^0.8.8;\nimport \"./PriceConverter.sol\";\n\nerror FundMe__notOwner();\n\n/**\n * @title FundMe Contract\n * @author Priyam Soni\n * @notice This contract is to demo a sample crowd funding\n * @dev This contract implements price feeds as our library\n */\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    address[] private s_funders;\n    mapping(address => uint256) private s_funded;\n    AggregatorV3Interface private s_priceFeed;\n\n    address private immutable i_owner;\n    uint256 public constant MIN_USD = 50 * 10 ** 18;\n\n    modifier onlyOwner() {\n        /**\n         * @notice Checking if the withdraw function is called by the owner\n         * @custom:oldsyntax require(msg.sender == i_owner,\"You are not the owner\");\n         */\n        if (msg.sender != i_owner) {\n            revert FundMe__notOwner();\n        }\n        //Running the rest of the code\n        _;\n    }\n\n    /**\n     * @notice Assign the owner as the address deploying the contract\n     */\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    /**\n     * @notice Called when a funder sends fund to smart contract\n     */\n\n    function fund() public payable {\n        //Condition to receive a minimum amount\n        require(\n            msg.value.getConversionRate(s_priceFeed) >= MIN_USD,\n            \"Minimum amount you can send is $50\"\n        );\n        //storing address of funder in an array\n        s_funders.push(msg.sender);\n        //Mapping the total amount to funder using funded mapper\n        s_funded[msg.sender] += msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        //Clearing all the fund mappings for each funder\n        for (uint i = 0; i < s_funders.length; i++) {\n            address funder = s_funders[i];\n            s_funded[funder] = 0;\n        }\n\n        //Resetting the array\n        s_funders = new address[](0);\n\n        /*\n            Withdrawing funds from smart conract.There are three ways:\n            1. Transfer\n            payable(msg.sender).transfer(address(this).balance);\n            2. Send\n            bool sendSuccess = payable(msg.sender).send(address(this).balance);\n            require(sendSuccess,\"Send Failed\");\n            3.Call\n        */\n\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call Failed\");\n    }\n\n    function cheaperWithdraw() public onlyOwner {\n        address[] memory _funders = s_funders;\n        for (uint i = 0; i < _funders.length; i++) {\n            address funder = _funders[i];\n            s_funded[funder] = 0;\n        }\n        //Resetting the array\n        s_funders = new address[](0);\n\n        /*\n            Withdrawing funds from smart conract.There are three ways:\n            1. Transfer\n            payable(msg.sender).transfer(address(this).balance);\n            2. Send\n            bool sendSuccess = payable(msg.sender).send(address(this).balance);\n            require(sendSuccess,\"Send Failed\");\n            3.Call\n        */\n\n        (bool callSuccess, ) = payable(i_owner).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call Failed\");\n    }\n\n    /**\n     * @notice Getter Functions\n     */\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunders(uint index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getFunded(address funder) public view returns (uint) {\n        return s_funded[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
        },
        "contracts/PriceConverter.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n        // ETH/USD rate in 18 digit\n        return uint256(answer * 10000000000);\n    }\n\n    // 1000000000\n    // call it get fiatConversionRate, since it assumes something about decimals\n    // It wouldn't work for every aggregator\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\n        return ethAmountInUsd;\n    }\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": {
            "useLiteralContent": true
        }
    }
}
